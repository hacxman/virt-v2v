=encoding utf8

=head1 NAME

virt-v2v.conf - configuration file for virt-v2v

=head1 DESCRIPTION

C<virt-v2v.conf> describes:

=over

=item *

how to map virtual network interface connections when importing them from
another environment.

=item *

software which can be installed by virt-v2v during the conversion process.

=back

=head1 FORMAT

The configuration file is an XML document whose root element is
E<lt>virt-v2vE<gt>.

=head2 Mapping network interface connections

When importing a guest from a different machine and/or hypervisor, it is likely
that the name of the virtual interface its network devices were connected to
will change. For example, a typical Xen guest will be connected to a bridge
device called xenbrN. This bridge is created by Xen and will not exist locally
by default.

virt-v2v can change these on import to connect to an appropriate local
interface. The mapping is specified by the E<lt>networkE<gt> element, which
is a child of the root element. The configuration can specify any number of
E<lt>networkE<gt> elements. E<lt>networkE<gt> has 2 attributes:

=over

=item type

type is either 'bridge', which specifies a bridge to a local interface, or
'network', which specifies a locally managed virtual network. For Xen and ESX
guests the source type will typically be 'bridge'.

=item name

name specifies the name of the given network or bridge.

=back

The mapping is specified by a nested E<lt>networkE<gt> element.

The following example specifies that a guest interface which bridges to 'xenbr1'
should be change to connect to the local managed network called 'default':

 <network type='bridge' name='xenbr1'>
   <network type='network' name='default'/>
 </network>

=head2 Specifying software to be installed

virt-v2v may have to install software in a guest during the conversion process
to ensure it boots. An example is replacing a Xen paravirtualised kernel with a
normal kernel. This software will be specific to the guest operating system.

Software to be installed is specified in the E<lt>appE<gt> element, which is a
child of the root element. The configuration can specify any number of
E<lt>appE<gt> elements. E<lt>appE<gt> can have 5 attributes:

=over

=item name

The symbolic name of the software virt-v2v is looking for. name is a mandatory
attribute.

=item os

The name of the guest operating system, as returned by libguestfs.

=item major

The major version name of the guest operating system, as returned by
libguestfs.

=item minor

The minor version name of the guest operating system, as returned by libguestfs.

=item arch

The guest architecture, as returned by libguestfs.

=back

virt-v2v requests a file from the configuration by its symbolic name, searching
based on its additional attributes.  If an attribute is missing from the
E<lt>appE<gt> element, it will match any value. If multiple E<lt>appE<gt>
elements would match a given search, virt-v2v will choose the most specific
match. Specifically, it searches in the following order:

=over

=item *

os, major, minor, arch

=item *

os, major, minor

=item *

os, major, arch

=item *

os, major

=item *

os

=back

If virt-v2v doesn't find a matching E<lt>appE<gt>, it will quit with an error
describing what it was looking for.

The E<lt>appE<gt> element must contain a E<lt>pathE<gt> element, which specifies
the path to the software. It may also contain any number of E<lt>depE<gt>
elements, which specify the paths to dependencies of the application.

virt-v2v will attempt to install dependencies first. A dependency will only be
installed if it is not already installed, or the installed version is older than
the specified version.

Paths given in both the E<lt>pathE<gt> and E<lt>depE<gt> must be absolute,
unless there is a top level E<lt>path-rootE<gt> element. If it exists, all
E<lt>pathE<gt> and E<lt>depE<gt> elements will be relative to
E<lt>path-rootE<gt>.

virt-v2v passes software to the guest by creating an iso image and passing it to
the guest as a cd-rom drive. The path to this iso image must be specified in a
top level E<lt>iso-pathE<gt> element.

The following example specifies the location of 'kernel' for RHEL 5, all minor
versions, on i686:

 <path-root>/var/lib/virt-v2v/software</path-root>
 <iso-path>/var/lib/virt-v2v/transfer.iso</iso-path>

 <app os='rhel' major='5' arch='i686' name='kernel'>
   <path>rhel/5/kernel-2.6.18-128.el5.i686.rpm</path>
   <dep>rhel/5/ecryptfs-utils-56-8.el5.i386.rpm</dep>
   <dep>rhel/5/lvm2-2.02.40-6.el5.i386.rpm</dep>
   <dep>rhel/5/device-mapper-1.02.28-2.el5.i386.rpm</dep>
   <dep>rhel/5/device-mapper-event-1.02.28-2.el5.i386.rpm</dep>
 </app>

The kernel can be found at
/var/lib/virt-v2v/software/rhel/5/kernel-2.6.18-128.el5.i686.rpm. It has 4
dependencies, which will be installed if they are not present, or are too old.
All dependency paths are also relative to /var/lib/virt-v2v/software. virt-v2v
will create a transfer iso image containing all paths and dependencies at
/var/lib/virt-v2v/transfer.iso.

=head1 EXAMPLE

The following example is the default example configuration file included in the
virt-v2v distribution. The majority of the file specifies the locations of
replacement FV kernels for RHEL 4 and RHEL 5. These will be required when
converting Xen guests which use a PV kernel.

It also specifies that guests using a bridge called either 'xenbr1' (the Xen
default) or 'VM Network' (the VMware ESX default) should be mapped to the local
managed network called 'default'.

 <virt-v2v>
   <path-root>/var/lib/virt-v2v/software</path-root>
   <iso-path>/var/lib/virt-v2v/transfer.iso</iso-path>

   <!-- RHEL 5
        All of these RPMS are from RHEL 5.3, which was the first version of RHEL
        5 to support VirtIO -->
   <app os='rhel' major='5' arch='i686' name='kernel'>
     <path>rhel/5/kernel-2.6.18-128.el5.i686.rpm</path>
     <dep>rhel/5/ecryptfs-utils-56-8.el5.i386.rpm</dep>
     <dep>rhel/5/lvm2-2.02.40-6.el5.i386.rpm</dep>
     <dep>rhel/5/device-mapper-1.02.28-2.el5.i386.rpm</dep>
     <dep>rhel/5/device-mapper-event-1.02.28-2.el5.i386.rpm</dep>
   </app>
   <app os='rhel' major='5' arch='i686' name='kernel-PAE'>
     <path>rhel/5/kernel-PAE-2.6.18-128.el5.i686.rpm</path>
     <dep>rhel/5/ecryptfs-utils-56-8.el5.i386.rpm</dep>
     <dep>rhel/5/lvm2-2.02.40-6.el5.i386.rpm</dep>
     <dep>rhel/5/device-mapper-1.02.28-2.el5.i386.rpm</dep>
     <dep>rhel/5/device-mapper-event-1.02.28-2.el5.i386.rpm</dep>
   </app>
   <app os='rhel' major='5' arch='x86_64' name='kernel'>
     <path>rhel/5/kernel-2.6.18-128.el5.x86_64.rpm</path>
     <dep>rhel/5/ecryptfs-utils-56-8.el5.x86_64.rpm</dep>
     <dep>rhel/5/lvm2-2.02.40-6.el5.x86_64.rpm</dep>
     <dep>rhel/5/device-mapper-1.02.28-2.el5.x86_64.rpm</dep>
     <dep>rhel/5/device-mapper-event-1.02.28-2.el5.x86_64.rpm</dep>
   </app>

   <!-- RHEL 4
        All of these RPMs are from RHEL 4.8, which was the first version of RHEL
        4 to support VirtIO -->
   <app os='rhel' major='4' arch='i686' name='kernel'>
     <path>rhel/4/kernel-2.6.9-89.EL.i686.rpm</path>
   </app>
   <app os='rhel' major='4' arch='i686' name='kernel-smp'>
     <path>rhel/4/kernel-smp-2.6.9-89.EL.i686.rpm</path>
   </app>
   <app os='rhel' major='4' arch='i686' name='kernel-hugemem'>
     <path>rhel/4/kernel-hugemem-2.6.9-89.EL.i686.rpm</path>
   </app>
   <app os='rhel' major='4' arch='x86_64' name='kernel'>
     <path>rhel/4/kernel-2.6.9-89.EL.x86_64.rpm</path>
   </app>
   <app os='rhel' major='4' arch='x86_64' name='kernel-smp'>
     <path>rhel/4/kernel-smp-2.6.9-89.EL.x86_64.rpm</path>
   </app>
   <app os='rhel' major='4' arch='x86_64' name='kernel-largesmp'>
     <path>rhel/4/kernel-largesmp-2.6.9-89.EL.x86_64.rpm</path>
   </app>

   <!-- Networks -->
   <!-- The default Xen bridge name -->
   <network type='bridge' name='xenbr1'>
     <network type='network' name='default'/>
   </network>

   <!-- The default ESX bridge name -->
   <network type='bridge' name='VM Network'>
     <network type='network' name='default'/>
   </network>
 </virt-v2v>

=head1 COPYRIGHT

Copyright (C) 2009,2010 Red Hat Inc.

=head1 SEE ALSO

L<virt-v2v(1)>,
L<http://libguestfs.org/>
